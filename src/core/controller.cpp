// Copyright University of Lyon, 2012 - 2017
// Distributed under the GNU Lesser General Public License Version 2.1 (LGPLv2)
// (Refer to accompanying file LICENSE.md or copy at
//  https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html )

////////////////////////////////////////////////////////////////////////////////
#include "controller.hpp"
#include "application.hpp"
////////////////////////////////////////////////////////////////////////////////
namespace vcity
{
    ////////////////////////////////////////////////////////////////////////////////
    Controller::Controller()
    {

    }
    ////////////////////////////////////////////////////////////////////////////////
    Controller::~Controller()
    {

    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::reset()
    {

    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::addNode(const URI& URI)
    {

    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::deleteNode(const URI& URI)
    {

    }

    ////////////////////////////////////////////////////////////////////////////////
    void Controller::addLayer(const std::string& name)
    {
        //app().getScene().addLayer(name); // MT TODO
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::deleteLayer(const vcity::URI& uri)
    {
        app().getScene().deleteLayer(uri);
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::setLayerName(const vcity::URI& uri, const std::string& name)
    {
        abstractLayer* abstractlayer = app().getScene().getLayer(uri);
        if (abstractlayer)
        {
            abstractlayer->setName(name);
        }
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::addTile(const vcity::URI& uriLayer, vcity::Tile& tile)
    {
        app().getScene().addTile(uriLayer, &tile);
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::deleteTile(const vcity::URI& uri)
    {
        app().getScene().deleteTile(uri);
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::setTileName(const vcity::URI& uri, const std::string& name)
    {
        Tile* tile = app().getScene().getTile(uri);
        if (tile)
        {
            tile->setName(name);
        }
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::addShpNode(const vcity::URI& uriLayer, GDALDataset* poDS, std::string name)
    {
        abstractLayer* layer = app().getScene().getLayer(uriLayer);
        if (layer)
        {
            LayerShp* layerShp = dynamic_cast<LayerShp*>(layer);
            if (layerShp)
            {
                layerShp->m_shp = poDS;
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////////////
    void Controller::resetSelection()
    {
        app().resetSelectedNodes();
    }
    ////////////////////////////////////////////////////////////////////////////////
    bool Controller::addSelection(const vcity::URI& uri)
    {
        return app().addSelectedNode(uri);
    }
    ////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
} // namespace vcity
////////////////////////////////////////////////////////////////////////////////
